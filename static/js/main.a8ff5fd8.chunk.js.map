{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","pages/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","allCenturies","PeopleFilters","setSearchParams","sexFilter","get","centuriesFilter","getAll","query","className","sex","type","placeholder","onChange","event","target","map","century","classNames","includes","centuries","filter","href","Loader","PersonLink","person","slug","state","personSlug","name","PeopleTable","people","useParams","sortFilter","orderFilter","handleSortFilter","param","handleOrderFilter","sort","order","undefined","born","died","mother","motherName","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","sortPeople","a","b","orderOfSort","localeCompare","useEffect","getPeople","catch","finally","peopleWithParents","find","element","length","Math","ceil","toLowerCase","Navbar","role","isActive","App","path","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a8ff5fd8.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const allCenturies = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = (\n) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sexFilter = searchParams.get('sex');\n  const centuriesFilter = searchParams.getAll('centuries');\n  const query = searchParams.get('query') as string;\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setSearchParams(getSearchWith(searchParams, {\n      query: event.target.value || null,\n    }));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={sexFilter === null ? 'is-active' : ''}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={sexFilter === 'm' ? 'is-active' : ''}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={sexFilter === 'f' ? 'is-active' : ''}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            value={query}\n            placeholder=\"Search\"\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classNames('button mr-1', {\n                  'is-info': centuriesFilter.includes(century),\n                })}\n                params={{\n                  centuries: centuriesFilter.includes(century)\n                    ? centuriesFilter.filter(\n                      value => value !== century,\n                    )\n                    : [...centuriesFilter, century],\n                }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype PersonLinkProps = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<PersonLinkProps> = (\n  { person },\n) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <td>\n      <Link\n        to={`/people/${person.slug}?${searchParams.toString()}`}\n        state={{ personSlug: person.slug }}\n        className={person.sex === 'f' ? 'has-text-danger' : ''}\n      >\n        {person.name}\n      </Link>\n    </td>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype PeopleTableProps = {\n  people: Person[],\n};\n\nexport const PeopleTable = (\n  {\n    people,\n  }: PeopleTableProps,\n) => {\n  const { personSlug } = useParams();\n  const [searchParams] = useSearchParams();\n  const sortFilter = searchParams.get('sort');\n  const orderFilter = searchParams.get('order');\n\n  const handleSortFilter = (param: string) => {\n    if (sortFilter === null && orderFilter === null) {\n      return param;\n    }\n\n    if (sortFilter === param && orderFilter === null) {\n      return param;\n    }\n\n    return null;\n  };\n\n  const handleOrderFilter = (param: string) => {\n    if (sortFilter === null && orderFilter === null) {\n      return null;\n    }\n\n    if (sortFilter === param && orderFilter === null) {\n      return 'desc';\n    }\n\n    return null;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('name'),\n                  order: handleOrderFilter('name'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'name',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('sex'),\n                  order: handleOrderFilter('sex'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'sex',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('born'),\n                  order: handleOrderFilter('born'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'born',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                params={{\n                  sort: handleSortFilter('died'),\n                  order: handleOrderFilter('died'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': orderFilter === 'desc'\n                      && sortFilter === 'died',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={person.slug === personSlug\n              ? 'has-background-warning' : undefined}\n          >\n            <PersonLink\n              person={person}\n            />\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            {person.mother\n              ? (\n                <PersonLink\n                  person={person.mother}\n                />\n              )\n              : (\n                <td>\n                  {person.motherName !== null\n                    ? person.motherName : '-'}\n                </td>\n              )}\n            {person.father\n              ? (\n                <PersonLink\n                  person={person.father}\n                />\n              )\n              : (\n                <td>\n                  {person.fatherName !== null\n                    ? person.fatherName : '-'}\n                </td>\n              )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters, allCenturies } from '../components/PeopleFilters';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n  const centuries = searchParams.getAll('centuries') || allCenturies;\n  const query = searchParams.get('query') as string;\n  const order = searchParams.get('order');\n  const sort = searchParams.get('sort') as string;\n\n  const sortPeople\n    = (a: string | number, b: string | number, orderOfSort: string | null) => {\n      if (typeof a === 'string'\n      && typeof b === 'string'\n      && orderOfSort === null) {\n        return a.localeCompare(b);\n      }\n\n      if (typeof a === 'string'\n      && typeof b === 'string'\n      && orderOfSort === 'desc') {\n        return b.localeCompare(a);\n      }\n\n      if (typeof a === 'number'\n      && typeof b === 'number'\n      && orderOfSort === null) {\n        return a - b;\n      }\n\n      return (b as number) - (a as number);\n    };\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const peopleWithParents = people.map(person => {\n    const mother = people.find(element => element.name === person.motherName);\n    const father = people.find(element => element.name === person.fatherName);\n\n    return { ...person, mother, father };\n  }).filter(person => {\n    if (searchParams.toString().includes('m')) {\n      return person.sex === 'm';\n    }\n\n    if (searchParams.toString().includes('f')) {\n      return person.sex === 'f';\n    }\n\n    return person;\n  }).filter(person => {\n    if (centuries.length !== 0) {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    }\n\n    return person;\n  }).filter(person => {\n    if (query !== null) {\n      return person.name.toLowerCase().includes(query.toLowerCase())\n        || person.motherName?.toLowerCase().includes(query.toLowerCase())\n        || person.fatherName?.toLowerCase().includes(query.toLowerCase());\n    }\n\n    return person;\n  })\n    .sort((a, b) => {\n      if (sort === 'name') {\n        return sortPeople(a.name, b.name, order);\n      }\n\n      if (sort === 'sex') {\n        return sortPeople(a.sex, b.sex, order);\n      }\n\n      if (sort === 'born') {\n        return sortPeople(a.born, b.born, order);\n      }\n\n      if (sort === 'died') {\n        return sortPeople(a.died, b.died, order);\n      }\n\n      return 0;\n    });\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading\n              && <PeopleFilters /> }\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError\n                && <p data-cy=\"peopleLoadingError\">Something went wrong</p>}\n\n              {people.length === 0 && !isLoading\n                && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )}\n\n              {!isLoading && peopleWithParents.length === 0\n                && (\n                  <p>\n                    There are no people matching the current search criteria\n                  </p>\n                )}\n\n              {!isLoading && (\n                <PeopleTable\n                  people={peopleWithParents}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={\n              ({ isActive }) => classNames('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })\n            }\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={\n              ({ isActive }) => classNames('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })\n            }\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <h1 className=\"title\">Home Page</h1>\n              }\n            />\n            <Route\n              path=\"/home\"\n              element={\n                <Navigate to=\"/\" replace />\n              }\n            />\n            <Route\n              path=\"/people\"\n              element={\n                <PeoplePage />\n              }\n            />\n            <Route\n              path=\"/people/:personSlug\"\n              element={\n                <PeoplePage />\n              }\n            />\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}